options(repos = unique( c()))
options(repos = unique( c(mvb="https://markbravington.r-universe.dev", getOption("repos")["CRAN"])))
install.packages("debug")
options(repos = unique( c(mvb="https://markbravington.r-universe.dev", getOption( "repos")["CRAN"])))
install.packages("debug")
install.packages("ggplot2")
git clone https://github.com/abbimc57-gif/Test.git
git clone https://github.com/abbimc57-gif/Test.git
file.edit(foo.r)
file.edit("foo.r")
cat("Hello World!")
cat("Hello World!")
a
a
a<- 2
a
b<- 1/a
a
b
b <- 1/a
b
func_cos <- function(x,y,k=0.5) {
x * cos (y-k)
}
func_cos(3,2)
func_cos(3,2,0)
q()
A
A<- matrix(1:6, 3, 2)
A
class(A)
cat(class_A)
cat(class(A))
cat(attributes(A))
attributes(A)
a3d<- c(TRUE, TRUE, FALSE)
a3d
a3d<- c(TRUE, FALSE, FALSE)
class(a3d)
cat(class(a3d))
cat(typeof(A))
a3d[2:3]
cat(typeof(A))
a3d[2]<- TRUE
a3d
bb<- 1:10
bb
class(bb)
typeof(bb)
bb[c(1, 4 9)]<- c(.1, -3, 2.2)] #R can change attributes for you without you having to specify (Unlike Python!)
bb[c(1, 4 9)]<- c(.1, -3, 2.2) #R can change attributes for you without you having to specify (Unlike Python!)
bb[c(1, 4, 9)]<- c(.1, -3, 2.2) #R can change attributes for you without you having to specify (Unlike Python!)
class(bb)
typeof(bb)
bb[3:8]
set.seed(2)
a<- runif(6);b<- runif(6)
a
b
c<- sin(a) * b
c
c<- a * b +2
c
a<- 1:4 # A 4-vector
b<- 5:6 # A 2-vector
a * b
a*b
#This is the same as
a* c(b,b) # where c is concantenating
d<- 5:7
d
a * d
x<- 1:5; names(x)<- c("fred", "sue", "bill", "eve", "bob")
x
x[c(TRUE, FALSE, TRUE, FALSE, FALSE)] # Returns the values where there is true
x[c(TRUE, FALSE)]
x[x>3] # Give me all values of x where x is greater than 3
x>3
x>3
x[c("sue", "eve")]
a<- array(1:24, c(3,2,4))
a
a[3,1,2]
a[3,1,2] # Just type the indices
a[1:2,1,1]
a[1:2,1,]
attributes(a)
d<- dim(a)
d
a[3,2,3]
a[3+1*d[1]+2*d[1]*d[2]]
i<- c(1,1,3);j<- c(2,1,1); k<- c(4,3,1)
a[i,j,k] #THIS IS WRONG
a[3+1*d[1]+2*d[1]*d[2]] #CORRECT
a[i+(j-1)*d[1]+(k-1)*d[1]*d[2]] #CORRECT
B<- matrix(1:6, 2, 3); B
B<- matrix(1:6, 2, 3); B # Does this run B automatically for you?
a<- c(.3, -1.2, 2.3)
B %*% a #Matrix Multiplication
a
B %*% a #Matrix Multiplication
B[1,2]<- -1
a<- c(.3, -1.2, 2.3)
B %*% a #Matrix Multiplication
stuff<- list(a=1:6, txt="furin cleavage site", l2= function(x) log(x^2), more=list(a="er", b=42))
stuff
stuff[[1]]
stuff[[3]]
stuff[[txt]] # Can also do it using their name
stuff<- list(a=1:6, txt="furin cleavage site", l2= function(x) log(x^2), more=list(a="er", b=42))
stuff[[txt]] # Can also do it using their name
stuff[["txt"]] # Can also do it using their name
stuff$txt
stuff[c(1,2)]
stuff[1]
stuff$g<- runif(10)
stuff
stuff$g<- NULL # Deletes an element in the list
stuff
fac<- factor(c("fred", "sue", "sue", "bill", "fred"))
fac
class(fac)
levels(fac)
typeof(fac)
dat<- data.frame(y = c(.3, .7, 1.2), x=1:3, fac=factor(c("a", "b", "a")))
data
dat
dat[1,]
dim(dat)
dat$fac
d<- as.POSIXct("2016-06-28 21:30:00", "2016-06-29 22:00:00", format="%Y-%m-%d $H:%M:%S")
d
d<- as.POSIXct("2016-06-28 21:30:00", "2016-06-29 22:00:00", format="%y-%m-%d $H:%M:%S")
d<- as.POSIXct(c("2016-06-28 21:30:00", "2016-06-29 22:00:00", format="%y-%m-%d $H:%M:%S"))
d<- as.POSIXct(c("2016-06-28 21:30:00", "2016-06-29 22:00:00"), format="%y-%m-%d $H:%M:%S")
d
d<- as.POSIXct(c("2016-06-28 21:30:00", "2016-06-29 22:00:00", "2016-06-30"), format="%Y-%m-%d $H:%M:%S")
d
m
setwd("C:/Users/abbi_/stat_prog")
a<- scan("shakespeare.txt", what="character", skip=83, nlines=196043-83, fileEncoding="UTF-8")
b<- unique(a)
c<- match(a, b)
freq<- tabulate(c)
pop<- rank(-freq, na.last=TRUE)
top<- which(pop <= 1000)
top_1000_words<- a[top]
mlag<- 4
m<- match(a,top_1000_words)
n<- length(m)
M<- matrix(nrow=(n-mlag), ncol=mlag+1)
m
a
b
m
M
M[,1]=m
M[,1]
M[1,]
M[1,] = m
M[1,] = m[mlag+1]
M[1,]
M[1,]
m[mlag+!]
m[:mlag+1]
m[0, mlag+1]
sliding_window_matrix <- function(v, k = 4) {
n <- length(v)
# build each row as v[i:(i+k-1)] and stack with rbind
M <- t(sapply(1:(n-k+1), function(i) v[i:(i+k-1)]))
return(M)
}
sliding_window_matrix(m, k = 4)
tmp <- sliding_window_matrix(m, k = 4)
tmp
tmp[top_1000_words]
tmp(1:10)
setwd("C:/Users/abbi_/stat_prog")
a<- scan("shakespeare.txt", what="character", skip=83, nlines=196043-83, fileEncoding="UTF-8")
b<- unique(a)
c<- match(a, b)
freq<- tabulate(c)
pop<- rank(-freq, na.last=TRUE)
top<- which(pop <= 1000)
top_1000_words<- a[top]
mlag<- 4
m<- match(a,top_1000_words)
n<- length(m)
M<- matrix(nrow=(n-mlag), ncol=mlag+1)
sliding_window_matrix <- function(v, k = 4) {
n <- length(v)
# build each row as v[i:(i+k-1)] and stack with rbind
M <- t(sapply(1:(n-k+1), function(i) v[i:(i+k-1)]))
return(M)
}
tmp <- sliding_window_matrix(m, mlag+1)
tmp(1:5)
tmp
tmp[1:10]
tmp[1:10][mtop_1000_words]
tmp[1:10][top_1000_words]
top_1000_words[tmp[1:10]]
top_1000_words[tmp]
tmp
tmp[1]
tmp[,1]
tmp[1,]
top_1000_words[tmp[1,]]
top_1000_words[tmp[,]]
M <- matrix(v[idx], nrow = nrow(idx), ncol = ncol(idx))
M <- matrix(top_1000_words[tmp], nrow = nrow(tmp), ncol = ncol(tmp))
M
